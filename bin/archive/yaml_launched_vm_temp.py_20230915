#!/usr/bin/env python3

import yaml
import os
import argparse
import logging
import subprocess
import time
import sys
import signal

logging.basicConfig(filename='log/vm_creation.log', level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

def signal_handler(signal, frame):
    print("You pressed Ctrl+C!")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def monitor_vm_events(vm_name):
    # Wait for the VM to be fully launched before monitoring its events
    while not vm_exists(vm_name):
        time.sleep(1)  # Wait for a second before rechecking
    
    logging.info(f"Monitoring events for {domain_name}...")
    process = subprocess.Popen(["sudo", "virsh", "event", vm_name, "--event", "lifecycle"], stdout=subprocess.PIPE)

    # While the process is running
    while True:
        output = process.stdout.readline().decode('utf-8')
        logging.info(f"Received event: {output}")
        if 'shut off' in output:
            cleanup_vm(vm_name)
            break

def vm_exists(vm_name):
    result = os.popen(f"sudo virsh list --all | grep -w {vm_name}").read().strip()
    return bool(result)

def monitor_vm_events(domain_name):
    print(f"Monitoring {domain_name} for shut off event...")
    process = subprocess.Popen(['sudo', 'virsh', 'event', domain_name, '--event', 'lifecycle'], stdout=subprocess.PIPE)

    while True:
        output = process.stdout.readline().decode('utf-8')

        if 'shut off' in output:
            cleanup_vm(domain_name)
            print(f"{domain_name} has been shut off. Image cleaned up. Exiting script.")
            sys.exit(0)  # Explicitly exit the script

    # For transient VMs, they're automatically undefined after shutdown.
    # However, you can still check and undefine it manually if required.
    if vm_exists(vm_name):  # This uses the vm_exists function we defined earlier
        os.system(f"sudo virsh undefine {vm_name}")
        logging.info(f"Undefined VM {vm_name}")
    else:
        logging.warning(f"VM {vm_name} does not exist or was already undefined.")

def create_vm_from_config(config_file):
    try:
        with open(config_file, 'r') as file:
            config = yaml.safe_load(file)
    except Exception as e:
        logging.error(f"Error reading configuration: {e}")
        return

    try:
        cmd = f"virt-install --name={config['vm']['name']} --memory={config['vm']['memory']} --vcpus={config['vm']['cpus']} --os-variant={config['vm']['os_variant']} --import"

        if 'cdrom' in config['vm']:
            cmd += f" --cdrom={config['vm']['cdrom']}"

        if config['vm'].get('transient', False):
            cmd += " --transient"

        if 'backing_image' in config['vm']['disk']:
            overlay_image_path = config['vm']['disk']['path']
            cmd_create_overlay = f"qemu-img create -f qcow2 -b {config['vm']['disk']['backing_image']} -F qcow2 {overlay_image_path}"
            os.system(cmd_create_overlay)

        cmd += f" --disk path={config['vm']['disk']['path']},size={config['vm']['disk']['size']}"

    except KeyError as e:
        logging.error(f"KeyError in configuration: {e}")
        return

    exit_code = os.system(cmd)
    if exit_code != 0:
        logging.error(f"'virt-install' command exited with code {exit_code}.")
    else:
        logging.info(f"'virt-install' command executed successfully for {config['vm']['name']}.")

    # After the VM is created
    monitor_vm_events(config['vm']['name'])

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Create a VM based on a YAML configuration.')
    parser.add_argument('config_path', type=str, help='Path to the YAML configuration file.')
    args = parser.parse_args()
    logging.info(f"Starting VM creation from {args.config_path}.")
    create_vm_from_config(args.config_path)
    logging.info(f"Finished VM creation process for {args.config_path}.")

